// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MidasDataAccess.Models;

#nullable disable

namespace MidasDataAccess.Migrations
{
    [DbContext(typeof(MidasContext))]
    [Migration("20240425071831_deleteUserActivityLogOnRoles")]
    partial class deleteUserActivityLogOnRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MidasDataAccess.Models.AssociateUserBranch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchOfficeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Associat__3214EC074CF4ADD5");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("AssociateUserBranches");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Bank", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Banks__3214EC073E0B7FAD");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BranchOffice", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostalCodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__BranchOf__3214EC07754AD330");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "OfficeCode" }, "UQ__BranchOf__16F536C6D42E8226")
                        .IsUnique();

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessOwnerDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeIdentityNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07B6A1C06A");

                    b.HasIndex("CompanyId");

                    b.ToTable("BusinessOwnerDetails");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessSector", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07B146A0B6");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BusinessSectors");
                });

            modelBuilder.Entity("MidasDataAccess.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Cities__3214EC078ECFC12C");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyAsset", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id")
                        .HasName("PK__CompanyA__3214EC0788905132");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAssets");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyCredit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ApplicationAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ApplicationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("BoardOfManagementFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchOfficeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyOwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("CompanyRegistrationNumberFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditApplicationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreditEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("EstablishRegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("EstablishRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EstablishRegistrationNumberFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FinancialStatementFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityNumberFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Npwp")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("NPWP");

                    b.Property<string>("Npwpfile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPWPFile");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PlaceOfEstasblishment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CompanyC__3214EC07AE1E45A9");

                    b.HasIndex("BoardOfManagementFile");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CompanyOwnerId");

                    b.HasIndex("CompanyRegistrationNumberFile");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EstablishRegistrationNumberFile");

                    b.HasIndex("FinancialStatementFile");

                    b.HasIndex("IdentityNumberFile");

                    b.HasIndex("Npwpfile");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.HasIndex(new[] { "CreditApplicationNumber" }, "UQ__CompanyC__5473C74C9619A32C")
                        .IsUnique();

                    b.HasIndex(new[] { "Npwp" }, "UQ__CompanyC__E542917DCD57F910")
                        .IsUnique();

                    b.ToTable("CompanyCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndividualCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentBilling")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiptFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CreditPa__3214EC075A0D5231");

                    b.HasIndex("CompanyCreditId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IndividualCreditId");

                    b.HasIndex("ReceiptFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.HasIndex(new[] { "PaymentBilling" }, "UQ__CreditPa__5F8E21DE1FCC2FB3")
                        .IsUnique();

                    b.ToTable("CreditPayments");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditUpgrade", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("AnnualBusinessGross")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditUpgradeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FinancialStatementFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("money");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal>("ProfitBusinessGross")
                        .HasColumnType("money");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CreditUp__3214EC070C13F416");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FinancialStatementFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreditUpgradeNumber" }, "UQ__CreditUp__6FC6D8937441A792")
                        .IsUnique();

                    b.ToTable("CreditUpgrades");
                });

            modelBuilder.Entity("MidasDataAccess.Models.EmergencyContact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndividualCreditId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Relative")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Emergenc__3214EC0771E679C6");

                    b.HasIndex("IndividualCreditId");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("MidasDataAccess.Models.FileManagement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__FileMana__3214EC074EBF133F");

                    b.ToTable("FileManagements");
                });

            modelBuilder.Entity("MidasDataAccess.Models.IndividualCredit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ApplicationAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ApplicationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("BranchOfficeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BusinessCertificateFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BusinessPeriod")
                        .HasColumnType("int");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BusinessPlaceStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("BusinessPostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessSectorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditApplicationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreditEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreditStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DomicileFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FamilyCardFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FamilyCardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("IdentityCardFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityCardSelfieFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PostalCodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TotalEmployee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Individu__3214EC07B8A14867");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("BusinessCertificateFile");

                    b.HasIndex("BusinessPostalCode");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DomicileFile");

                    b.HasIndex("FamilyCardFile");

                    b.HasIndex("IdentityCardFile");

                    b.HasIndex("IdentityCardSelfieFile");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreditApplicationNumber" }, "UQ__Individu__5473C74C2A8121B5")
                        .IsUnique();

                    b.ToTable("IndividualCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.PostalCode", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCode1")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("PostalCode");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VillageId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__PostalCo__3214EC0744B4C17E");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VillageId");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Province__3214EC07115CA759");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3214EC077DFD2452");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MidasDataAccess.Models.SubDistrict", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__SubDistr__3214EC073B248931");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SubDistricts");
                });

            modelBuilder.Entity("MidasDataAccess.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("CompanyCreditLimit")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreditScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("PersonalCreditLimit")
                        .HasColumnType("money");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0779B1C58E");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "IdentityNumber" }, "UQ__Users__6354A73FEFBA1441")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534726D34FB")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Village", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubDistrictId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Villages__3214EC07FF9CFCDC");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Withdrawal", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndividualCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceiptFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Withdraw__3214EC073C477D25");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyCreditId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IndividualCreditId");

                    b.HasIndex("ReceiptFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.AssociateUserBranch", b =>
                {
                    b.HasOne("MidasDataAccess.Models.BranchOffice", "BranchOffice")
                        .WithMany("AssociateUserBranches")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("FK__Associate__Branc__628FA481");

                    b.HasOne("MidasDataAccess.Models.User", "User")
                        .WithMany("AssociateUserBranches")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Associate__UserI__619B8048");

                    b.Navigation("BranchOffice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Bank", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("BankCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Banks__CreatedBy__5441852A");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("BankDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Banks__DeletedBy__571DF1D5");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("BankUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Banks__UpdatedBy__5629CD9C");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BranchOffice", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("BranchOfficeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__BranchOff__Creat__5BE2A6F2");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("BranchOfficeDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__BranchOff__Delet__5EBF139D");

                    b.HasOne("MidasDataAccess.Models.PostalCode", "PostalCode")
                        .WithMany("BranchOffices")
                        .HasForeignKey("PostalCodeId")
                        .IsRequired()
                        .HasConstraintName("FK__BranchOff__Posta__5AEE82B9");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("BranchOfficeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__BranchOff__Updat__5DCAEF64");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("PostalCode");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessOwnerDetail", b =>
                {
                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "Company")
                        .WithMany("BusinessOwnerDetails")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessO__Compa__10566F31");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessSector", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("BusinessSectorCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessS__Creat__656C112C");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("BusinessSectorDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__BusinessS__Delet__68487DD7");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("BusinessSectorUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__BusinessS__Updat__6754599E");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.City", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CityCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Cities__CreatedB__3A81B327");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CityDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Cities__DeletedB__3D5E1FD2");

                    b.HasOne("MidasDataAccess.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__Cities__Province__398D8EEE");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CityUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Cities__UpdatedB__3C69FB99");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Province");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyAsset", b =>
                {
                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "Company")
                        .WithMany("CompanyAssets")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyAs__Compa__1332DBDC");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyCredit", b =>
                {
                    b.HasOne("MidasDataAccess.Models.FileManagement", "BoardOfManagementFileNavigation")
                        .WithMany("CompanyCreditBoardOfManagementFileNavigations")
                        .HasForeignKey("BoardOfManagementFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Board__07C12930");

                    b.HasOne("MidasDataAccess.Models.BranchOffice", "BranchOffice")
                        .WithMany("CompanyCredits")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Branc__02FC7413");

                    b.HasOne("MidasDataAccess.Models.User", "CompanyOwner")
                        .WithMany("CompanyCreditCompanyOwners")
                        .HasForeignKey("CompanyOwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Compa__02084FDA");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "CompanyRegistrationNumberFileNavigation")
                        .WithMany("CompanyCreditCompanyRegistrationNumberFileNavigations")
                        .HasForeignKey("CompanyRegistrationNumberFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Compa__04E4BC85");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CompanyCreditCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Creat__09A971A2");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CompanyCreditDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__CompanyCr__Delet__0C85DE4D");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "EstablishRegistrationNumberFileNavigation")
                        .WithMany("CompanyCreditEstablishRegistrationNumberFileNavigations")
                        .HasForeignKey("EstablishRegistrationNumberFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Estab__03F0984C");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "FinancialStatementFileNavigation")
                        .WithMany("CompanyCreditFinancialStatementFileNavigations")
                        .HasForeignKey("FinancialStatementFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Finan__08B54D69");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "IdentityNumberFileNavigation")
                        .WithMany("CompanyCreditIdentityNumberFileNavigations")
                        .HasForeignKey("IdentityNumberFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Ident__06CD04F7");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "NpwpfileNavigation")
                        .WithMany("CompanyCreditNpwpfileNavigations")
                        .HasForeignKey("Npwpfile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__NPWPF__05D8E0BE");

                    b.HasOne("MidasDataAccess.Models.PostalCode", "PostalCode")
                        .WithMany("CompanyCredits")
                        .HasForeignKey("PostalCodeId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Posta__01142BA1");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CompanyCreditUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CompanyCr__Updat__0B91BA14");

                    b.HasOne("MidasDataAccess.Models.User", "VerifiedByNavigation")
                        .WithMany("CompanyCreditVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__CompanyCr__Verif__0D7A0286");

                    b.Navigation("BoardOfManagementFileNavigation");

                    b.Navigation("BranchOffice");

                    b.Navigation("CompanyOwner");

                    b.Navigation("CompanyRegistrationNumberFileNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("EstablishRegistrationNumberFileNavigation");

                    b.Navigation("FinancialStatementFileNavigation");

                    b.Navigation("IdentityNumberFileNavigation");

                    b.Navigation("NpwpfileNavigation");

                    b.Navigation("PostalCode");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditPayment", b =>
                {
                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "CompanyCredit")
                        .WithMany("CreditPayments")
                        .HasForeignKey("CompanyCreditId")
                        .HasConstraintName("FK__CreditPay__Compa__17F790F9");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CreditPaymentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__CreditPay__Creat__19DFD96B");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CreditPaymentDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__CreditPay__Delet__1CBC4616");

                    b.HasOne("MidasDataAccess.Models.IndividualCredit", "IndividualCredit")
                        .WithMany("CreditPayments")
                        .HasForeignKey("IndividualCreditId")
                        .HasConstraintName("FK__CreditPay__Indiv__17036CC0");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "ReceiptFileNavigation")
                        .WithMany("CreditPayments")
                        .HasForeignKey("ReceiptFile")
                        .IsRequired()
                        .HasConstraintName("FK__CreditPay__Recei__18EBB532");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CreditPaymentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CreditPay__Updat__1BC821DD");

                    b.HasOne("MidasDataAccess.Models.User", "VerifiedByNavigation")
                        .WithMany("CreditPaymentVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__CreditPay__Verif__1DB06A4F");

                    b.Navigation("CompanyCredit");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IndividualCredit");

                    b.Navigation("ReceiptFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditUpgrade", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CreditUpgradeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__CreditUpg__Creat__2DE6D218");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CreditUpgradeDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__CreditUpg__Delet__30C33EC3");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "FinancialStatementFileNavigation")
                        .WithMany("CreditUpgrades")
                        .HasForeignKey("FinancialStatementFile")
                        .IsRequired()
                        .HasConstraintName("FK__CreditUpg__Finan__2CF2ADDF");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CreditUpgradeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CreditUpg__Updat__2FCF1A8A");

                    b.HasOne("MidasDataAccess.Models.User", "User")
                        .WithMany("CreditUpgradeUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CreditUpg__UserI__2BFE89A6");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("FinancialStatementFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidasDataAccess.Models.EmergencyContact", b =>
                {
                    b.HasOne("MidasDataAccess.Models.IndividualCredit", "IndividualCredit")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("IndividualCreditId")
                        .IsRequired()
                        .HasConstraintName("FK__Emergency__Indiv__31B762FC");

                    b.Navigation("IndividualCredit");
                });

            modelBuilder.Entity("MidasDataAccess.Models.IndividualCredit", b =>
                {
                    b.HasOne("MidasDataAccess.Models.BranchOffice", "BranchOffice")
                        .WithMany("IndividualCredits")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Branc__71D1E811");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "BusinessCertificateFileNavigation")
                        .WithMany("IndividualCreditBusinessCertificateFileNavigations")
                        .HasForeignKey("BusinessCertificateFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Busin__76969D2E");

                    b.HasOne("MidasDataAccess.Models.PostalCode", "BusinessPostalCodeNavigation")
                        .WithMany("IndividualCreditBusinessPostalCodeNavigations")
                        .HasForeignKey("BusinessPostalCode")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Busin__70DDC3D8");

                    b.HasOne("MidasDataAccess.Models.BusinessSector", "BusinessSector")
                        .WithMany("IndividualCredits")
                        .HasForeignKey("BusinessSectorId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Busin__6FE99F9F");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("IndividualCreditCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Creat__778AC167");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("IndividualCreditDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Individua__Delet__7A672E12");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "DomicileFileNavigation")
                        .WithMany("IndividualCreditDomicileFileNavigations")
                        .HasForeignKey("DomicileFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Domic__72C60C4A");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "FamilyCardFileNavigation")
                        .WithMany("IndividualCreditFamilyCardFileNavigations")
                        .HasForeignKey("FamilyCardFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Famil__75A278F5");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "IdentityCardFileNavigation")
                        .WithMany("IndividualCreditIdentityCardFileNavigations")
                        .HasForeignKey("IdentityCardFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Ident__73BA3083");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "IdentityCardSelfieFileNavigation")
                        .WithMany("IndividualCreditIdentityCardSelfieFileNavigations")
                        .HasForeignKey("IdentityCardSelfieFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Ident__74AE54BC");

                    b.HasOne("MidasDataAccess.Models.PostalCode", "PostalCode")
                        .WithMany("IndividualCreditPostalCodes")
                        .HasForeignKey("PostalCodeId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Posta__6EF57B66");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("IndividualCreditUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Individua__Updat__797309D9");

                    b.HasOne("MidasDataAccess.Models.User", "User")
                        .WithMany("IndividualCreditUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__UserI__6E01572D");

                    b.Navigation("BranchOffice");

                    b.Navigation("BusinessCertificateFileNavigation");

                    b.Navigation("BusinessPostalCodeNavigation");

                    b.Navigation("BusinessSector");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("DomicileFileNavigation");

                    b.Navigation("FamilyCardFileNavigation");

                    b.Navigation("IdentityCardFileNavigation");

                    b.Navigation("IdentityCardSelfieFileNavigation");

                    b.Navigation("PostalCode");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidasDataAccess.Models.PostalCode", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("PostalCodeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__PostalCod__Creat__4E88ABD4");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("PostalCodeDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__PostalCod__Delet__5165187F");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("PostalCodeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__PostalCod__Updat__5070F446");

                    b.HasOne("MidasDataAccess.Models.Village", "Village")
                        .WithMany("PostalCodes")
                        .HasForeignKey("VillageId")
                        .IsRequired()
                        .HasConstraintName("FK__PostalCod__Villa__4D94879B");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Province", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("ProvinceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Provinces__Creat__33D4B598");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("ProvinceDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Provinces__Delet__36B12243");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("ProvinceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Provinces__Updat__35BCFE0A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.SubDistrict", b =>
                {
                    b.HasOne("MidasDataAccess.Models.City", "City")
                        .WithMany("SubDistricts")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__SubDistri__CityI__403A8C7D");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("SubDistrictCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__SubDistri__Creat__412EB0B6");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("SubDistrictDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__SubDistri__Delet__440B1D61");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("SubDistrictUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__SubDistri__Updat__4316F928");

                    b.Navigation("City");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.User", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Users__CreatedBy__2B3F6F97");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("InverseDeletedByNavigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Users__DeletedBy__2E1BDC42");

                    b.HasOne("MidasDataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__2A4B4B5E");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Users__UpdatedBy__2D27B809");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Village", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("VillageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Villages__Create__47DBAE45");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("VillageDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Villages__Delete__4AB81AF0");

                    b.HasOne("MidasDataAccess.Models.SubDistrict", "SubDistrict")
                        .WithMany("Villages")
                        .HasForeignKey("SubDistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__Villages__SubDis__46E78A0C");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("VillageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Villages__Update__49C3F6B7");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("SubDistrict");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Withdrawal", b =>
                {
                    b.HasOne("MidasDataAccess.Models.Bank", "Bank")
                        .WithMany("Withdrawals")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__Withdrawa__BankI__208CD6FA");

                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "CompanyCredit")
                        .WithMany("Withdrawals")
                        .HasForeignKey("CompanyCreditId")
                        .HasConstraintName("FK__Withdrawa__Compa__22751F6C");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("WithdrawalCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Withdrawa__Creat__245D67DE");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("WithdrawalDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Withdrawa__Delet__2739D489");

                    b.HasOne("MidasDataAccess.Models.IndividualCredit", "IndividualCredit")
                        .WithMany("Withdrawals")
                        .HasForeignKey("IndividualCreditId")
                        .HasConstraintName("FK__Withdrawa__Indiv__2180FB33");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "ReceiptFileNavigation")
                        .WithMany("Withdrawals")
                        .HasForeignKey("ReceiptFile")
                        .IsRequired()
                        .HasConstraintName("FK__Withdrawa__Recei__236943A5");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("WithdrawalUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Withdrawa__Updat__2645B050");

                    b.HasOne("MidasDataAccess.Models.User", "VerifiedByNavigation")
                        .WithMany("WithdrawalVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__Withdrawa__Verif__282DF8C2");

                    b.Navigation("Bank");

                    b.Navigation("CompanyCredit");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IndividualCredit");

                    b.Navigation("ReceiptFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Bank", b =>
                {
                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BranchOffice", b =>
                {
                    b.Navigation("AssociateUserBranches");

                    b.Navigation("CompanyCredits");

                    b.Navigation("IndividualCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessSector", b =>
                {
                    b.Navigation("IndividualCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.City", b =>
                {
                    b.Navigation("SubDistricts");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyCredit", b =>
                {
                    b.Navigation("BusinessOwnerDetails");

                    b.Navigation("CompanyAssets");

                    b.Navigation("CreditPayments");

                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.FileManagement", b =>
                {
                    b.Navigation("CompanyCreditBoardOfManagementFileNavigations");

                    b.Navigation("CompanyCreditCompanyRegistrationNumberFileNavigations");

                    b.Navigation("CompanyCreditEstablishRegistrationNumberFileNavigations");

                    b.Navigation("CompanyCreditFinancialStatementFileNavigations");

                    b.Navigation("CompanyCreditIdentityNumberFileNavigations");

                    b.Navigation("CompanyCreditNpwpfileNavigations");

                    b.Navigation("CreditPayments");

                    b.Navigation("CreditUpgrades");

                    b.Navigation("IndividualCreditBusinessCertificateFileNavigations");

                    b.Navigation("IndividualCreditDomicileFileNavigations");

                    b.Navigation("IndividualCreditFamilyCardFileNavigations");

                    b.Navigation("IndividualCreditIdentityCardFileNavigations");

                    b.Navigation("IndividualCreditIdentityCardSelfieFileNavigations");

                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.IndividualCredit", b =>
                {
                    b.Navigation("CreditPayments");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.PostalCode", b =>
                {
                    b.Navigation("BranchOffices");

                    b.Navigation("CompanyCredits");

                    b.Navigation("IndividualCreditBusinessPostalCodeNavigations");

                    b.Navigation("IndividualCreditPostalCodes");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MidasDataAccess.Models.SubDistrict", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("MidasDataAccess.Models.User", b =>
                {
                    b.Navigation("AssociateUserBranches");

                    b.Navigation("BankCreatedByNavigations");

                    b.Navigation("BankDeletedByNavigations");

                    b.Navigation("BankUpdatedByNavigations");

                    b.Navigation("BranchOfficeCreatedByNavigations");

                    b.Navigation("BranchOfficeDeletedByNavigations");

                    b.Navigation("BranchOfficeUpdatedByNavigations");

                    b.Navigation("BusinessSectorCreatedByNavigations");

                    b.Navigation("BusinessSectorDeletedByNavigations");

                    b.Navigation("BusinessSectorUpdatedByNavigations");

                    b.Navigation("CityCreatedByNavigations");

                    b.Navigation("CityDeletedByNavigations");

                    b.Navigation("CityUpdatedByNavigations");

                    b.Navigation("CompanyCreditCompanyOwners");

                    b.Navigation("CompanyCreditCreatedByNavigations");

                    b.Navigation("CompanyCreditDeletedByNavigations");

                    b.Navigation("CompanyCreditUpdatedByNavigations");

                    b.Navigation("CompanyCreditVerifiedByNavigations");

                    b.Navigation("CreditPaymentCreatedByNavigations");

                    b.Navigation("CreditPaymentDeletedByNavigations");

                    b.Navigation("CreditPaymentUpdatedByNavigations");

                    b.Navigation("CreditPaymentVerifiedByNavigations");

                    b.Navigation("CreditUpgradeCreatedByNavigations");

                    b.Navigation("CreditUpgradeDeletedByNavigations");

                    b.Navigation("CreditUpgradeUpdatedByNavigations");

                    b.Navigation("CreditUpgradeUsers");

                    b.Navigation("IndividualCreditCreatedByNavigations");

                    b.Navigation("IndividualCreditDeletedByNavigations");

                    b.Navigation("IndividualCreditUpdatedByNavigations");

                    b.Navigation("IndividualCreditUsers");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseDeletedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("PostalCodeCreatedByNavigations");

                    b.Navigation("PostalCodeDeletedByNavigations");

                    b.Navigation("PostalCodeUpdatedByNavigations");

                    b.Navigation("ProvinceCreatedByNavigations");

                    b.Navigation("ProvinceDeletedByNavigations");

                    b.Navigation("ProvinceUpdatedByNavigations");

                    b.Navigation("SubDistrictCreatedByNavigations");

                    b.Navigation("SubDistrictDeletedByNavigations");

                    b.Navigation("SubDistrictUpdatedByNavigations");

                    b.Navigation("VillageCreatedByNavigations");

                    b.Navigation("VillageDeletedByNavigations");

                    b.Navigation("VillageUpdatedByNavigations");

                    b.Navigation("WithdrawalCreatedByNavigations");

                    b.Navigation("WithdrawalDeletedByNavigations");

                    b.Navigation("WithdrawalUpdatedByNavigations");

                    b.Navigation("WithdrawalVerifiedByNavigations");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Village", b =>
                {
                    b.Navigation("PostalCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
