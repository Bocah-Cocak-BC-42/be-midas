// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MidasDataAccess.Models;

#nullable disable

namespace MidasDataAccess.Migrations
{
    [DbContext(typeof(MidasContext))]
    [Migration("20240510075544_updateStatusLengthAndUpdateApplicationNumberNullable")]
    partial class updateStatusLengthAndUpdateApplicationNumberNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MidasDataAccess.Models.AssociateUserBranch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchOfficeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Associat__3214EC074CF4ADD5");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("AssociateUserBranches");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Bank", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Banks__3214EC073E0B7FAD");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = "1b05a6c5-7dec-4893-a979-471de140a852",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8804),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bank Sumut"
                        },
                        new
                        {
                            Id = "38100c2c-f4a0-424f-9f8e-87f441b5e827",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8807),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Mandiri"
                        },
                        new
                        {
                            Id = "4f935728-481e-44ad-bb41-fdab4869a104",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8809),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Dana"
                        },
                        new
                        {
                            Id = "62c1c057-efb3-4f8e-9906-43942151ce14",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8814),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "BTPN"
                        },
                        new
                        {
                            Id = "6c74507c-3b8a-4b98-94e3-aaa8a6a0c03b",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8815),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bank DKI"
                        },
                        new
                        {
                            Id = "8250fdef-5dc8-4a8a-b252-fe0e1d7d49f8",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8817),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Permata"
                        },
                        new
                        {
                            Id = "88c0db84-8345-4c7c-945a-26d5853c4c05",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8819),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jenius"
                        },
                        new
                        {
                            Id = "9d09bc01-4e81-441e-82d2-7e3dfe7546e6",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8820),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Seabanks"
                        },
                        new
                        {
                            Id = "6793a561-f2b8-410b-80c6-e45071080294",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8822),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "BCA"
                        },
                        new
                        {
                            Id = "adc7c804-193f-48e7-ab1d-6590e5983310",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8824),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bank RUT"
                        },
                        new
                        {
                            Id = "b7c176d8-c7b2-400e-aa8f-3c3bf44c71f4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8825),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "BRI"
                        },
                        new
                        {
                            Id = "dc6fabd5-6ed0-4e88-8849-86c867fd4771",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8826),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bank Lampung"
                        },
                        new
                        {
                            Id = "e69d5415-6dcf-4863-92a9-30e0401461fb",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8828),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Berlian"
                        },
                        new
                        {
                            Id = "eea804c5-0bfd-46d8-a9f8-32a724726a1e",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8829),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Hana"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.BranchOffice", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VillageId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__BranchOf__3214EC07754AD330");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VillageId");

                    b.HasIndex(new[] { "OfficeCode" }, "UQ__BranchOf__16F536C6D42E8226")
                        .IsUnique();

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessOwnerDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeIdentityNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07B6A1C06A");

                    b.HasIndex("CompanyId");

                    b.ToTable("BusinessOwnerDetails");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessSector", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC07B146A0B6");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BusinessSectors");

                    b.HasData(
                        new
                        {
                            Id = "1c7a0718-23d2-4f40-b0b0-9660b71124c9",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8342),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Crypto"
                        },
                        new
                        {
                            Id = "641bf0b4-73cd-4e79-b8cf-6317c55d88f3",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8345),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jasa"
                        },
                        new
                        {
                            Id = "b7ef6638-3077-4d8a-815f-6885edfe14a2",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8347),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Permainan"
                        },
                        new
                        {
                            Id = "ba4289cb-c761-470f-a1b1-03c4e391ca64",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8349),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kuliner"
                        },
                        new
                        {
                            Id = "c40544f0-a4d0-4cb4-9d83-8ce395496ea3",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8350),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Keuangan"
                        },
                        new
                        {
                            Id = "e4e433de-f9bc-4c29-92a8-1e01240cbf12",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8353),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Mebel"
                        },
                        new
                        {
                            Id = "e64ba268-3bba-4df1-aabd-3a3af2a2d05c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8355),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Logistik"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Cities__3214EC078ECFC12C");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = "009fadbc-f3b3-4673-823f-f69783cf8a82",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8533),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Lombok Timur",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "0c9025cc-2085-4deb-9726-4227df85e546",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8536),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bireuen",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "14332fcf-925a-45d5-8bfc-dfee96f16855",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8538),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Barat Daya",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "1af41642-cb1f-43b9-b276-06cf1cc9e24f",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8540),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bener Meriah",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "1de07e9a-4549-4ef0-9149-95fcfb8c6db5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8541),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sumbawa",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "23e2f177-2bcd-4262-a171-743267a6d3d4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8544),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jembrana",
                            ProvinceId = "dcaec7fd-d140-4ebf-8654-0322c7376766"
                        },
                        new
                        {
                            Id = "287299b2-a882-411d-8f93-52354a1bf3a4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8546),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Pidie Jaya",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "b6229a2a-4848-469a-9345-65acb60df6e5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8548),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Langsa",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8550),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Mataram",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "be6f0890-2c59-44bf-b334-0032f236242c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8552),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sabang",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "ce4b8a5d-2c59-44bf-b334-0032f236242c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8554),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Lombok Tengah",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "d13134fb-61d6-4ca2-a107-4a0648e4db4f",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8555),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sumbawa Barat",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "d89fa8a3-6701-4ea6-96b0-5ade9c5ddef9",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8557),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Tenggara",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "def84e18-144e-4b4a-b900-024d22c389b9",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8558),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bima",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "28a67009-fb09-4136-bd97-71698faec47a",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8560),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Barat",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "2e7a21c6-2fe4-4c18-8c65-9e0f05423bdd",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8561),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Simeulue",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "3d7948d7-5d17-45fe-8e93-1f0da83c138d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8563),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Singaraja",
                            ProvinceId = "dcaec7fd-d140-4ebf-8654-0322c7376766"
                        },
                        new
                        {
                            Id = "4aa8236c-0a11-484a-8823-45148d7827d5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8565),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Tamiang",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "e27db493-6614-4e69-ac04-9121b2cbe83b",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8567),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Lombok Utara",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "e4e55e4a-f42b-4d38-bf8a-dff81f55e302",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8568),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Tabanan",
                            ProvinceId = "dcaec7fd-d140-4ebf-8654-0322c7376766"
                        },
                        new
                        {
                            Id = "ead6807b-2852-43c8-aa4d-42caa0fd02ba",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8570),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Pidie",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "531b275f-7e7d-43ea-ad3f-bea09c346c45",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8572),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Subulussalam",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "54aa93fe-9a3c-49df-83a1-ddd77f60e7cf",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8573),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Gianyar",
                            ProvinceId = "dcaec7fd-d140-4ebf-8654-0322c7376766"
                        },
                        new
                        {
                            Id = "65e2fb51-ea29-4b79-bb8b-44867608e588",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8575),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Selatan",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "66998491-8591-4255-86cf-c853ac33a335",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8576),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Nagan Raya",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "6e357876-73cd-41a6-9691-89f53bb8f39d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8582),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Lhokseumawe",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "6f4960ff-392a-4f50-90f3-7c9169940e6d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8584),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Utara",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "746a75aa-dcf6-42b5-91a8-47788387ef26",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8585),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Timur",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "7d69cd4a-0b3e-4c41-a801-1cf1012ab13c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8587),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Tengah",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "7e89aa26-55e6-4056-b34e-9fbcc55898c4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8588),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Lombok Barat",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "886533a2-a68f-45de-828c-e3320671facd",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8590),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Gayo Lues",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "8ea293be-d587-4a64-b2f6-4eea78a02187",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8591),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Jaya",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "961b6103-033e-4290-b64c-f072ebcaa8de",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8593),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Yogyakarta",
                            ProvinceId = "16358396-d6d8-4868-a998-72d46370adae"
                        },
                        new
                        {
                            Id = "9cd53a54-ba51-494d-8167-ab763096af5e",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8595),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Besar",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "a20ff930-cbba-466a-a3ef-acb046e50359",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8597),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Banda Aceh",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        },
                        new
                        {
                            Id = "b28de821-4eb8-42ad-9caf-5097e9c1ddac",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8598),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Dompu",
                            ProvinceId = "172d8827-30b5-46b2-9a45-87b87ede3193"
                        },
                        new
                        {
                            Id = "f8c3366e-dc73-4376-89e6-66980f4fe4ce",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8600),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh Singkil",
                            ProvinceId = "6e5c3799-606d-46d3-b191-1da8fdaf38d6"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyAsset", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id")
                        .HasName("PK__CompanyA__3214EC0788905132");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAssets");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyCredit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ApplicationAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ApplicationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("BoardOfManagementFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchOfficeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("CompanyRegistrationNumberFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditApplicationNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreditEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("EstablishRegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("EstablishRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EstablishRegistrationNumberFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FinancialStatementFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityNumberFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Npwp")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("NPWP");

                    b.Property<string>("Npwpfile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NPWPFile");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PlaceOfEstasblishment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VillageId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CompanyC__3214EC07AE1E45A9");

                    b.HasIndex("BoardOfManagementFile");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CompanyRegistrationNumberFile");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EstablishRegistrationNumberFile");

                    b.HasIndex("FinancialStatementFile");

                    b.HasIndex("IdentityNumberFile");

                    b.HasIndex("Npwpfile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.HasIndex("VillageId");

                    b.HasIndex(new[] { "Npwp" }, "UQ__CompanyC__E542917DCD57F910")
                        .IsUnique();

                    b.ToTable("CompanyCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndividualCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PaymentBilling")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiptFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CreditPa__3214EC075A0D5231");

                    b.HasIndex("CompanyCreditId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IndividualCreditId");

                    b.HasIndex("ReceiptFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.HasIndex(new[] { "PaymentBilling" }, "UQ__CreditPa__5F8E21DE1FCC2FB3")
                        .IsUnique();

                    b.ToTable("CreditPayments");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditUpgrade", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("AnnualBusinessGross")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditUpgradeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FinancialStatementFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("money");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal>("ProfitBusinessGross")
                        .HasColumnType("money");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CreditUp__3214EC070C13F416");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FinancialStatementFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreditUpgradeNumber" }, "UQ__CreditUp__6FC6D8937441A792")
                        .IsUnique();

                    b.ToTable("CreditUpgrades");
                });

            modelBuilder.Entity("MidasDataAccess.Models.EmergencyContact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndividualCreditId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Relative")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Emergenc__3214EC0771E679C6");

                    b.HasIndex("IndividualCreditId");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("MidasDataAccess.Models.FileManagement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__FileMana__3214EC074EBF133F");

                    b.ToTable("FileManagements");
                });

            modelBuilder.Entity("MidasDataAccess.Models.IndividualCredit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ApplicationAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ApplicationPeriod")
                        .HasColumnType("int");

                    b.Property<string>("BranchOfficeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BusinessCertificateFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BusinessPeriod")
                        .HasColumnType("int");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BusinessPlaceStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("BusinessSectorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessVillage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditApplicationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreditEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreditStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DomicileFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FamilyCardFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FamilyCardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("IdentityCardFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityCardSelfieFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TotalEmployee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VillageId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Individu__3214EC07B8A14867");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("BusinessCertificateFile");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("BusinessVillage");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DomicileFile");

                    b.HasIndex("FamilyCardFile");

                    b.HasIndex("IdentityCardFile");

                    b.HasIndex("IdentityCardSelfieFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VillageId");

                    b.HasIndex(new[] { "CreditApplicationNumber" }, "UQ__Individu__5473C74C2A8121B5")
                        .IsUnique();

                    b.ToTable("IndividualCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Province__3214EC07115CA759");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Name" }, "UQ__Provinces")
                        .IsUnique();

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = "00a357b8-990e-43ac-99c3-4e7312ce4416",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8386),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kepulauan Bangka Belitung"
                        },
                        new
                        {
                            Id = "0ef9590b-875d-408e-9642-32b6bac23ddf",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8389),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sulawesi Tengah"
                        },
                        new
                        {
                            Id = "0f4f8a37-859a-4398-9324-6766a3b34d74",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8390),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kepulauan Riau"
                        },
                        new
                        {
                            Id = "16358396-d6d8-4868-a998-72d46370adae",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8392),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "DI Yogyakarta"
                        },
                        new
                        {
                            Id = "172d8827-30b5-46b2-9a45-87b87ede3193",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8393),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Nusa Tenggara Barat"
                        },
                        new
                        {
                            Id = "176bb457-91de-4e1e-ac1c-52b901160225",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8396),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Maluku"
                        },
                        new
                        {
                            Id = "2d3f6b89-8158-4c13-a1b2-08efe7a70fa3",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8397),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Papua Barat Daya"
                        },
                        new
                        {
                            Id = "36f10aef-fed8-4305-939c-27c8905482a4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8399),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sulawesi Barat"
                        },
                        new
                        {
                            Id = "41245942-85e4-41f3-8a25-863bb42d5246",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8400),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Nusa Tenggara Timur (NTT)"
                        },
                        new
                        {
                            Id = "4868a839-6cdd-4b2e-a1a6-39432c803e14",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8402),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jawa Tengah"
                        },
                        new
                        {
                            Id = "506203f4-c027-484c-b94f-c21c76fb3e97",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8404),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sumatera Utara"
                        },
                        new
                        {
                            Id = "52ab62e2-d2f3-4230-97ed-02891ea8274a",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8406),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Papua Tengah"
                        },
                        new
                        {
                            Id = "6e5c3799-606d-46d3-b191-1da8fdaf38d6",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8407),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aceh (NAD)"
                        },
                        new
                        {
                            Id = "71f90e92-d5e6-4b2f-bfda-06dd7106a0ab",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8408),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Papua Selatan"
                        },
                        new
                        {
                            Id = "77a016a8-b63e-425f-acae-e0d878f7e35c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8425),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kalimantan Timur"
                        },
                        new
                        {
                            Id = "7afd6f20-897a-4091-b804-3d94eefc8a9b",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8443),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jakarta"
                        },
                        new
                        {
                            Id = "8ed7d069-12d9-4c09-8899-953850e933d4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8445),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Maluku Utara"
                        },
                        new
                        {
                            Id = "9a361418-0cdb-4068-aaff-253afb9cfdb0",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8447),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Banten"
                        },
                        new
                        {
                            Id = "a1a39d8e-3d38-4390-b285-393aa0d48a85",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8448),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jawa Timur"
                        },
                        new
                        {
                            Id = "a2346728-6d14-4392-af09-4d3ecd917ef3",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8450),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Papua"
                        },
                        new
                        {
                            Id = "a3e67ead-40eb-47a9-ac0c-636fbe9b2aa6",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8451),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kalimantan Utara"
                        },
                        new
                        {
                            Id = "a4509803-3652-40dd-a425-d9d36ccdad7c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8453),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Lampung"
                        },
                        new
                        {
                            Id = "a8c81edd-ed3d-416a-9ea8-b5943bfca14e",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8454),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jawa Barat"
                        },
                        new
                        {
                            Id = "a97b23fc-3c0a-451c-aa30-85c36e602293",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8456),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "DKI Jakarta"
                        },
                        new
                        {
                            Id = "ae8146a2-e35a-43b9-ae53-7c6f04922042",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8457),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kalimantan Tengah"
                        },
                        new
                        {
                            Id = "b07ad10d-a283-4533-832d-88ddad04e795",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8458),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sulawesi Tenggara"
                        },
                        new
                        {
                            Id = "b0f70a98-f3ca-4265-bd78-d29f39a4175e",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8460),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sumatera Barat"
                        },
                        new
                        {
                            Id = "b7f3d073-c897-4993-b171-837a1d96dc6a",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8461),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sulawesi Utara"
                        },
                        new
                        {
                            Id = "bacf7410-b6d4-4558-8422-8cb63d1e1b1c",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8463),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sulawesi Selatan"
                        },
                        new
                        {
                            Id = "c0556eb8-cc50-45ab-9cf0-d41609c4f8df",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8464),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Gorontalo"
                        },
                        new
                        {
                            Id = "c509b759-87f4-44e5-8fb2-9abefd16a01d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8471),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sumatera Selatan"
                        },
                        new
                        {
                            Id = "ce846670-cc6c-4d76-8673-4cb778bfaf27",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8472),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Riau"
                        },
                        new
                        {
                            Id = "cf46e31d-6ba0-4e9a-8db8-e412e8cc06d7",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8474),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kalimantan Selatan"
                        },
                        new
                        {
                            Id = "d306ed9f-5a1f-42f9-aed0-9c125b26398a",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8476),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bengkulu"
                        },
                        new
                        {
                            Id = "d89e1f90-1efc-485b-9bbb-bd5a887beaeb",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8477),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jambi"
                        },
                        new
                        {
                            Id = "dcaec7fd-d140-4ebf-8654-0322c7376766",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8479),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bali"
                        },
                        new
                        {
                            Id = "dd5b78a8-5906-441d-b255-effb9deb4b3e",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8480),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kalimantan Barat"
                        },
                        new
                        {
                            Id = "e9ea3de4-bc06-4d69-b232-f6e163de65e4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8481),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Papua Pegunungan"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3214EC077DFD2452");

                    b.HasIndex(new[] { "Name" }, "UQ__Roles")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "a993d9d6-0836-40b7-9fd8-a28a7f04a3d0",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8115),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "445e48a4-f3f6-4660-96d7-82505bc740d3",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8135),
                            Name = "Nasabah"
                        },
                        new
                        {
                            Id = "0ca5493b-903d-4863-8194-f1a2925f2088",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8137),
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = "15bbe07e-c6e8-4a82-bedf-4a4303594292",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8139),
                            Name = "Mantri"
                        },
                        new
                        {
                            Id = "1f7e704a-d720-49bb-9129-a317cb79756a",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8140),
                            Name = "Direktur"
                        },
                        new
                        {
                            Id = "fb0ea19a-7d05-4b0a-9532-59138d1a7bad",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8143),
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.SubDistrict", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__SubDistr__3214EC073B248931");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SubDistricts");

                    b.HasData(
                        new
                        {
                            Id = "0a794282-ef06-4e94-a567-e3aadcdb4f22",
                            CityId = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8648),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Mataram"
                        },
                        new
                        {
                            Id = "10ec0309-bda9-41a8-b366-44d3a901f431",
                            CityId = "65e2fb51-ea29-4b79-bb8b-44867608e588",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8651),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bakongan Timur"
                        },
                        new
                        {
                            Id = "12d1fba7-cc1b-4cd0-bd9c-060bad09f79c",
                            CityId = "961b6103-033e-4290-b64c-f072ebcaa8de",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8653),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Mantrijeron"
                        },
                        new
                        {
                            Id = "13ae4b0f-4059-4962-9e34-c9a6fa61b4f3",
                            CityId = "65e2fb51-ea29-4b79-bb8b-44867608e588",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8655),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kluet Tengah"
                        },
                        new
                        {
                            Id = "19c0c127-d4b5-4ccc-a9e0-0fd934621aa8",
                            CityId = "7e89aa26-55e6-4056-b34e-9fbcc55898c4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8657),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Selaparang"
                        },
                        new
                        {
                            Id = "2d8a5faf-395e-4c89-aa74-95aa264b8d3d",
                            CityId = "65e2fb51-ea29-4b79-bb8b-44867608e588",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8659),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kluet Selatan"
                        },
                        new
                        {
                            Id = "39eaed2a-63d4-47fb-8270-caa5ad8803c9",
                            CityId = "961b6103-033e-4290-b64c-f072ebcaa8de",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8661),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Wirobrajan"
                        },
                        new
                        {
                            Id = "552500b3-f1fe-4421-a64b-fe1dc3911347",
                            CityId = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8662),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sandubaya"
                        },
                        new
                        {
                            Id = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39",
                            CityId = "65e2fb51-ea29-4b79-bb8b-44867608e588",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8664),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bakongan"
                        },
                        new
                        {
                            Id = "56d332f7-c44c-417a-9655-ade356d09549",
                            CityId = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8666),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Selaparang"
                        },
                        new
                        {
                            Id = "925a7f89-9d21-411c-800c-5ac7c47b152f",
                            CityId = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8668),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Sekarbela"
                        },
                        new
                        {
                            Id = "a4efc8b0-b662-4745-b414-704ef5081bac",
                            CityId = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8669),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Ampenan"
                        },
                        new
                        {
                            Id = "ba70f8d4-86be-4b64-a262-159a5c771171",
                            CityId = "3c8aa9c4-22ad-4d85-9fb3-523242a75ec5",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8671),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Cakranegara"
                        },
                        new
                        {
                            Id = "e6209b8b-511c-490e-8ba8-b732eca766b2",
                            CityId = "009fadbc-f3b3-4673-823f-f69783cf8a82",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8673),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jerowaru"
                        },
                        new
                        {
                            Id = "f218305e-4358-4001-87d1-71a63f252bc4",
                            CityId = "009fadbc-f3b3-4673-823f-f69783cf8a82",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8674),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aikmel"
                        },
                        new
                        {
                            Id = "f5f8ee19-bf92-4049-a2e5-4ef682b41750",
                            CityId = "65e2fb51-ea29-4b79-bb8b-44867608e588",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8676),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Kluet Timur"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("CompanyCreditLimit")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreditScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("PersonalCreditLimit")
                        .HasColumnType("money");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0779B1C58E");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "IdentityNumber" }, "UQ__Users__6354A73FEFBA1441")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534726D34FB")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8307),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Email = "admin@midas.com",
                            FullName = "Admin",
                            Gender = "M",
                            IdentityNumber = "AA00000001",
                            NickName = "Admin",
                            Password = "$2a$12$ZEqw5fRxjcndbH.TekcXq.Pvk03lJD.mzxN73qownotDhtSfJ.vdq",
                            RegistrationDate = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8303),
                            RoleId = "a993d9d6-0836-40b7-9fd8-a28a7f04a3d0"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.Village", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDistrictId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Villages__3214EC07FF9CFCDC");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SubDistrictId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Villages");

                    b.HasData(
                        new
                        {
                            Id = "325d131a-195e-422d-9e72-2ab306fe5ca7",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8713),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Bintaro",
                            PostalCode = "83118",
                            SubDistrictId = "a4efc8b0-b662-4745-b414-704ef5081bac"
                        },
                        new
                        {
                            Id = "34365695-fcff-454b-8f3e-0b4bcbf63780",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8720),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Cilinaya",
                            PostalCode = "83238",
                            SubDistrictId = "ba70f8d4-86be-4b64-a262-159a5c771171"
                        },
                        new
                        {
                            Id = "39baff07-06f8-4702-b313-2e26807d1d1b",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8723),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Pagutan",
                            PostalCode = "83117",
                            SubDistrictId = "0a794282-ef06-4e94-a567-e3aadcdb4f22"
                        },
                        new
                        {
                            Id = "3c83b90f-1de1-4444-8039-afd777e2f080",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8725),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Darul Ikhsan",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "3d1c4668-07e3-4456-a066-7991e231037d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8727),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Tanjung Karang",
                            PostalCode = "83115",
                            SubDistrictId = "925a7f89-9d21-411c-800c-5ac7c47b152f"
                        },
                        new
                        {
                            Id = "45f38282-072d-49e1-885a-d7420b63ad9a",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8730),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Pakuncen",
                            PostalCode = "55253",
                            SubDistrictId = "925a7f89-9d21-411c-800c-5ac7c47b152f"
                        },
                        new
                        {
                            Id = "46216ca1-14fb-4361-afb0-8e7cc9ff485b",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8732),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Dasan Cermen",
                            PostalCode = "83232",
                            SubDistrictId = "552500b3-f1fe-4421-a64b-fe1dc3911347"
                        },
                        new
                        {
                            Id = "4b1401bf-3619-44df-8191-6516e4b65397",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8734),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Mayura",
                            PostalCode = "83232",
                            SubDistrictId = "ba70f8d4-86be-4b64-a262-159a5c771171"
                        },
                        new
                        {
                            Id = "56effc3e-cca8-4c9c-adcb-ee69dfebecbd",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8736),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aik Prapa",
                            PostalCode = "83653",
                            SubDistrictId = "e6209b8b-511c-490e-8ba8-b732eca766b2"
                        },
                        new
                        {
                            Id = "596fc007-022c-4c8f-9633-f8a22f487d66",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8738),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Padang Beurahan (Padang Berahan)",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "59a370b6-0db0-4f5e-8d2a-d5835b38d242",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8740),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Turida",
                            PostalCode = "83237",
                            SubDistrictId = "552500b3-f1fe-4421-a64b-fe1dc3911347"
                        },
                        new
                        {
                            Id = "79f1dc3a-50ba-4223-96d1-1ad1f1585904",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8742),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Gampong Drien (Kampung Drien)",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "82718aa0-9400-499a-8acc-89ef5b9e9ca2",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8744),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Ujong Padang (Ujung Padang)",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "8f836995-92ca-4d16-aef9-940e1a79c2cf",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8746),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Karang Baru",
                            PostalCode = "83123",
                            SubDistrictId = "56d332f7-c44c-417a-9655-ade356d09549"
                        },
                        new
                        {
                            Id = "9360a076-35ab-4bf7-b267-62b2a79fc0a9",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8748),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Monjok Barat",
                            PostalCode = "83122",
                            SubDistrictId = "56d332f7-c44c-417a-9655-ade356d09549"
                        },
                        new
                        {
                            Id = "93fd0c5d-a66a-4434-b617-e1762caf666b",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8750),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Jempong Baru",
                            PostalCode = "83116",
                            SubDistrictId = "925a7f89-9d21-411c-800c-5ac7c47b152f"
                        },
                        new
                        {
                            Id = "a53b4bd8-ea83-4dc5-b615-dcdf3e9535d6",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8752),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Gedongkiwo",
                            PostalCode = "55142",
                            SubDistrictId = "12d1fba7-cc1b-4cd0-bd9c-060bad09f79c"
                        },
                        new
                        {
                            Id = "a97032a3-b3ba-4bd8-9927-f27fe70ec36d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8755),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Ujong Mangki (Ujung Mangki)",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "bf1f59a3-8d4f-42f3-95c1-fc5a26d15e1d",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8757),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Keude Bakongan",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "e6f007cd-5103-422d-b33c-0a7fa8a1c657",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8758),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Pejeruk",
                            PostalCode = "83113",
                            SubDistrictId = "a4efc8b0-b662-4745-b414-704ef5081bac"
                        },
                        new
                        {
                            Id = "eaecb320-e5b9-4396-92e0-4d8c7b4cc7a4",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8760),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Gampong Baro (Kampung Baru)",
                            PostalCode = "23773",
                            SubDistrictId = "55dc334e-4e28-4ce2-bdba-2c0b0429dd39"
                        },
                        new
                        {
                            Id = "f06d56e7-b092-4665-948f-b89426ca8d0f",
                            CreatedAt = new DateTime(2024, 5, 10, 14, 55, 43, 321, DateTimeKind.Local).AddTicks(8762),
                            CreatedBy = "41dfada5-6c53-4c7b-8c07-89037e511874",
                            Name = "Aikmel Barat",
                            PostalCode = "83653",
                            SubDistrictId = "e6209b8b-511c-490e-8ba8-b732eca766b2"
                        });
                });

            modelBuilder.Entity("MidasDataAccess.Models.Withdrawal", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndividualCreditId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceiptFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Withdraw__3214EC073C477D25");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyCreditId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("IndividualCreditId");

                    b.HasIndex("ReceiptFile");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.AssociateUserBranch", b =>
                {
                    b.HasOne("MidasDataAccess.Models.BranchOffice", "BranchOffice")
                        .WithMany("AssociateUserBranches")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("FK__Associate__Branc__628FA481");

                    b.HasOne("MidasDataAccess.Models.User", "User")
                        .WithMany("AssociateUserBranches")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Associate__UserI__619B8048");

                    b.Navigation("BranchOffice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Bank", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("BankCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Banks__CreatedBy__5441852A");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("BankDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Banks__DeletedBy__571DF1D5");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("BankUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Banks__UpdatedBy__5629CD9C");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BranchOffice", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("BranchOfficeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__BranchOff__Creat__5BE2A6F2");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("BranchOfficeDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__BranchOff__Delet__5EBF139D");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("BranchOfficeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__BranchOff__Updat__5DCAEF64");

                    b.HasOne("MidasDataAccess.Models.Village", "Village")
                        .WithMany("BranchOffices")
                        .HasForeignKey("VillageId")
                        .IsRequired()
                        .HasConstraintName("FK__BranchOff__Vill__5AEE82B9");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessOwnerDetail", b =>
                {
                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "Company")
                        .WithMany("BusinessOwnerDetails")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessO__Compa__10566F31");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessSector", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("BusinessSectorCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessS__Creat__656C112C");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("BusinessSectorDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__BusinessS__Delet__68487DD7");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("BusinessSectorUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__BusinessS__Updat__6754599E");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.City", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CityCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Cities__CreatedB__3A81B327");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CityDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Cities__DeletedB__3D5E1FD2");

                    b.HasOne("MidasDataAccess.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__Cities__Province__398D8EEE");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CityUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Cities__UpdatedB__3C69FB99");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Province");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyAsset", b =>
                {
                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "Company")
                        .WithMany("CompanyAssets")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyAs__Compa__1332DBDC");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyCredit", b =>
                {
                    b.HasOne("MidasDataAccess.Models.FileManagement", "BoardOfManagementFileNavigation")
                        .WithMany("CompanyCreditBoardOfManagementFileNavigations")
                        .HasForeignKey("BoardOfManagementFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Board__07C12930");

                    b.HasOne("MidasDataAccess.Models.BranchOffice", "BranchOffice")
                        .WithMany("CompanyCredits")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Branc__02FC7413");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "CompanyRegistrationNumberFileNavigation")
                        .WithMany("CompanyCreditCompanyRegistrationNumberFileNavigations")
                        .HasForeignKey("CompanyRegistrationNumberFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Compa__04E4BC85");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CompanyCreditCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Creat__09A971A2");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CompanyCreditDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__CompanyCr__Delet__0C85DE4D");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "EstablishRegistrationNumberFileNavigation")
                        .WithMany("CompanyCreditEstablishRegistrationNumberFileNavigations")
                        .HasForeignKey("EstablishRegistrationNumberFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Estab__03F0984C");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "FinancialStatementFileNavigation")
                        .WithMany("CompanyCreditFinancialStatementFileNavigations")
                        .HasForeignKey("FinancialStatementFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Finan__08B54D69");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "IdentityNumberFileNavigation")
                        .WithMany("CompanyCreditIdentityNumberFileNavigations")
                        .HasForeignKey("IdentityNumberFile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Ident__06CD04F7");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "NpwpfileNavigation")
                        .WithMany("CompanyCreditNpwpfileNavigations")
                        .HasForeignKey("Npwpfile")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__NPWPF__05D8E0BE");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CompanyCreditUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CompanyCr__Updat__0B91BA14");

                    b.HasOne("MidasDataAccess.Models.User", "VerifiedByNavigation")
                        .WithMany("CompanyCreditVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__CompanyCr__Verif__0D7A0286");

                    b.HasOne("MidasDataAccess.Models.Village", "Village")
                        .WithMany("CompanyCredits")
                        .HasForeignKey("VillageId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyCr__Vill__01142BA1");

                    b.Navigation("BoardOfManagementFileNavigation");

                    b.Navigation("BranchOffice");

                    b.Navigation("CompanyRegistrationNumberFileNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("EstablishRegistrationNumberFileNavigation");

                    b.Navigation("FinancialStatementFileNavigation");

                    b.Navigation("IdentityNumberFileNavigation");

                    b.Navigation("NpwpfileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VerifiedByNavigation");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditPayment", b =>
                {
                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "CompanyCredit")
                        .WithMany("CreditPayments")
                        .HasForeignKey("CompanyCreditId")
                        .HasConstraintName("FK__CreditPay__Compa__17F790F9");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CreditPaymentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__CreditPay__Creat__19DFD96B");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CreditPaymentDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__CreditPay__Delet__1CBC4616");

                    b.HasOne("MidasDataAccess.Models.IndividualCredit", "IndividualCredit")
                        .WithMany("CreditPayments")
                        .HasForeignKey("IndividualCreditId")
                        .HasConstraintName("FK__CreditPay__Indiv__17036CC0");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "ReceiptFileNavigation")
                        .WithMany("CreditPayments")
                        .HasForeignKey("ReceiptFile")
                        .IsRequired()
                        .HasConstraintName("FK__CreditPay__Recei__18EBB532");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CreditPaymentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CreditPay__Updat__1BC821DD");

                    b.HasOne("MidasDataAccess.Models.User", "VerifiedByNavigation")
                        .WithMany("CreditPaymentVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__CreditPay__Verif__1DB06A4F");

                    b.Navigation("CompanyCredit");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IndividualCredit");

                    b.Navigation("ReceiptFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CreditUpgrade", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("CreditUpgradeCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__CreditUpg__Creat__2DE6D218");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("CreditUpgradeDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__CreditUpg__Delet__30C33EC3");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "FinancialStatementFileNavigation")
                        .WithMany("CreditUpgrades")
                        .HasForeignKey("FinancialStatementFile")
                        .IsRequired()
                        .HasConstraintName("FK__CreditUpg__Finan__2CF2ADDF");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("CreditUpgradeUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CreditUpg__Updat__2FCF1A8A");

                    b.HasOne("MidasDataAccess.Models.User", "User")
                        .WithMany("CreditUpgradeUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CreditUpg__UserI__2BFE89A6");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("FinancialStatementFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MidasDataAccess.Models.EmergencyContact", b =>
                {
                    b.HasOne("MidasDataAccess.Models.IndividualCredit", "IndividualCredit")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("IndividualCreditId")
                        .IsRequired()
                        .HasConstraintName("FK__Emergency__Indiv__31B762FC");

                    b.Navigation("IndividualCredit");
                });

            modelBuilder.Entity("MidasDataAccess.Models.IndividualCredit", b =>
                {
                    b.HasOne("MidasDataAccess.Models.BranchOffice", "BranchOffice")
                        .WithMany("IndividualCredits")
                        .HasForeignKey("BranchOfficeId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Branc__71D1E811");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "BusinessCertificateFileNavigation")
                        .WithMany("IndividualCreditBusinessCertificateFileNavigations")
                        .HasForeignKey("BusinessCertificateFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Busin__76969D2E");

                    b.HasOne("MidasDataAccess.Models.BusinessSector", "BusinessSector")
                        .WithMany("IndividualCredits")
                        .HasForeignKey("BusinessSectorId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Busin__6FE99F9F");

                    b.HasOne("MidasDataAccess.Models.Village", "BusinessVillageNavigation")
                        .WithMany("IndividualCreditBusinessVillageNavigations")
                        .HasForeignKey("BusinessVillage")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Busin__70DDC3D8");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("IndividualCreditCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Creat__778AC167");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("IndividualCreditDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Individua__Delet__7A672E12");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "DomicileFileNavigation")
                        .WithMany("IndividualCreditDomicileFileNavigations")
                        .HasForeignKey("DomicileFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Domic__72C60C4A");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "FamilyCardFileNavigation")
                        .WithMany("IndividualCreditFamilyCardFileNavigations")
                        .HasForeignKey("FamilyCardFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Famil__75A278F5");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "IdentityCardFileNavigation")
                        .WithMany("IndividualCreditIdentityCardFileNavigations")
                        .HasForeignKey("IdentityCardFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Ident__73BA3083");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "IdentityCardSelfieFileNavigation")
                        .WithMany("IndividualCreditIdentityCardSelfieFileNavigations")
                        .HasForeignKey("IdentityCardSelfieFile")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Ident__74AE54BC");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("IndividualCreditUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Individua__Updat__797309D9");

                    b.HasOne("MidasDataAccess.Models.User", "User")
                        .WithMany("IndividualCreditUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__UserI__6E01572D");

                    b.HasOne("MidasDataAccess.Models.Village", "Village")
                        .WithMany("IndividualCreditVillages")
                        .HasForeignKey("VillageId")
                        .IsRequired()
                        .HasConstraintName("FK__Individua__Vill__6EF57B66");

                    b.Navigation("BranchOffice");

                    b.Navigation("BusinessCertificateFileNavigation");

                    b.Navigation("BusinessSector");

                    b.Navigation("BusinessVillageNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("DomicileFileNavigation");

                    b.Navigation("FamilyCardFileNavigation");

                    b.Navigation("IdentityCardFileNavigation");

                    b.Navigation("IdentityCardSelfieFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Province", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("ProvinceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Provinces__Creat__33D4B598");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("ProvinceDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Provinces__Delet__36B12243");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("ProvinceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Provinces__Updat__35BCFE0A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.SubDistrict", b =>
                {
                    b.HasOne("MidasDataAccess.Models.City", "City")
                        .WithMany("SubDistricts")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__SubDistri__CityI__403A8C7D");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("SubDistrictCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__SubDistri__Creat__412EB0B6");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("SubDistrictDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__SubDistri__Delet__440B1D61");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("SubDistrictUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__SubDistri__Updat__4316F928");

                    b.Navigation("City");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.User", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Users__CreatedBy__2B3F6F97");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("InverseDeletedByNavigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Users__DeletedBy__2E1BDC42");

                    b.HasOne("MidasDataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__2A4B4B5E");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Users__UpdatedBy__2D27B809");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Village", b =>
                {
                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("VillageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Villages__Create__47DBAE45");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("VillageDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Villages__Delete__4AB81AF0");

                    b.HasOne("MidasDataAccess.Models.SubDistrict", "SubDistrict")
                        .WithMany("Villages")
                        .HasForeignKey("SubDistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__Villages__SubDis__46E78A0C");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("VillageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Villages__Update__49C3F6B7");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("SubDistrict");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Withdrawal", b =>
                {
                    b.HasOne("MidasDataAccess.Models.Bank", "Bank")
                        .WithMany("Withdrawals")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__Withdrawa__BankI__208CD6FA");

                    b.HasOne("MidasDataAccess.Models.CompanyCredit", "CompanyCredit")
                        .WithMany("Withdrawals")
                        .HasForeignKey("CompanyCreditId")
                        .HasConstraintName("FK__Withdrawa__Compa__22751F6C");

                    b.HasOne("MidasDataAccess.Models.User", "CreatedByNavigation")
                        .WithMany("WithdrawalCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Withdrawa__Creat__245D67DE");

                    b.HasOne("MidasDataAccess.Models.User", "DeletedByNavigation")
                        .WithMany("WithdrawalDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Withdrawa__Delet__2739D489");

                    b.HasOne("MidasDataAccess.Models.IndividualCredit", "IndividualCredit")
                        .WithMany("Withdrawals")
                        .HasForeignKey("IndividualCreditId")
                        .HasConstraintName("FK__Withdrawa__Indiv__2180FB33");

                    b.HasOne("MidasDataAccess.Models.FileManagement", "ReceiptFileNavigation")
                        .WithMany("Withdrawals")
                        .HasForeignKey("ReceiptFile")
                        .IsRequired()
                        .HasConstraintName("FK__Withdrawa__Recei__236943A5");

                    b.HasOne("MidasDataAccess.Models.User", "UpdatedByNavigation")
                        .WithMany("WithdrawalUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Withdrawa__Updat__2645B050");

                    b.HasOne("MidasDataAccess.Models.User", "VerifiedByNavigation")
                        .WithMany("WithdrawalVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__Withdrawa__Verif__282DF8C2");

                    b.Navigation("Bank");

                    b.Navigation("CompanyCredit");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("IndividualCredit");

                    b.Navigation("ReceiptFileNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Bank", b =>
                {
                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BranchOffice", b =>
                {
                    b.Navigation("AssociateUserBranches");

                    b.Navigation("CompanyCredits");

                    b.Navigation("IndividualCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.BusinessSector", b =>
                {
                    b.Navigation("IndividualCredits");
                });

            modelBuilder.Entity("MidasDataAccess.Models.City", b =>
                {
                    b.Navigation("SubDistricts");
                });

            modelBuilder.Entity("MidasDataAccess.Models.CompanyCredit", b =>
                {
                    b.Navigation("BusinessOwnerDetails");

                    b.Navigation("CompanyAssets");

                    b.Navigation("CreditPayments");

                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.FileManagement", b =>
                {
                    b.Navigation("CompanyCreditBoardOfManagementFileNavigations");

                    b.Navigation("CompanyCreditCompanyRegistrationNumberFileNavigations");

                    b.Navigation("CompanyCreditEstablishRegistrationNumberFileNavigations");

                    b.Navigation("CompanyCreditFinancialStatementFileNavigations");

                    b.Navigation("CompanyCreditIdentityNumberFileNavigations");

                    b.Navigation("CompanyCreditNpwpfileNavigations");

                    b.Navigation("CreditPayments");

                    b.Navigation("CreditUpgrades");

                    b.Navigation("IndividualCreditBusinessCertificateFileNavigations");

                    b.Navigation("IndividualCreditDomicileFileNavigations");

                    b.Navigation("IndividualCreditFamilyCardFileNavigations");

                    b.Navigation("IndividualCreditIdentityCardFileNavigations");

                    b.Navigation("IndividualCreditIdentityCardSelfieFileNavigations");

                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.IndividualCredit", b =>
                {
                    b.Navigation("CreditPayments");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Withdrawals");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MidasDataAccess.Models.SubDistrict", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("MidasDataAccess.Models.User", b =>
                {
                    b.Navigation("AssociateUserBranches");

                    b.Navigation("BankCreatedByNavigations");

                    b.Navigation("BankDeletedByNavigations");

                    b.Navigation("BankUpdatedByNavigations");

                    b.Navigation("BranchOfficeCreatedByNavigations");

                    b.Navigation("BranchOfficeDeletedByNavigations");

                    b.Navigation("BranchOfficeUpdatedByNavigations");

                    b.Navigation("BusinessSectorCreatedByNavigations");

                    b.Navigation("BusinessSectorDeletedByNavigations");

                    b.Navigation("BusinessSectorUpdatedByNavigations");

                    b.Navigation("CityCreatedByNavigations");

                    b.Navigation("CityDeletedByNavigations");

                    b.Navigation("CityUpdatedByNavigations");

                    b.Navigation("CompanyCreditCreatedByNavigations");

                    b.Navigation("CompanyCreditDeletedByNavigations");

                    b.Navigation("CompanyCreditUpdatedByNavigations");

                    b.Navigation("CompanyCreditVerifiedByNavigations");

                    b.Navigation("CreditPaymentCreatedByNavigations");

                    b.Navigation("CreditPaymentDeletedByNavigations");

                    b.Navigation("CreditPaymentUpdatedByNavigations");

                    b.Navigation("CreditPaymentVerifiedByNavigations");

                    b.Navigation("CreditUpgradeCreatedByNavigations");

                    b.Navigation("CreditUpgradeDeletedByNavigations");

                    b.Navigation("CreditUpgradeUpdatedByNavigations");

                    b.Navigation("CreditUpgradeUsers");

                    b.Navigation("IndividualCreditCreatedByNavigations");

                    b.Navigation("IndividualCreditDeletedByNavigations");

                    b.Navigation("IndividualCreditUpdatedByNavigations");

                    b.Navigation("IndividualCreditUsers");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseDeletedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("ProvinceCreatedByNavigations");

                    b.Navigation("ProvinceDeletedByNavigations");

                    b.Navigation("ProvinceUpdatedByNavigations");

                    b.Navigation("SubDistrictCreatedByNavigations");

                    b.Navigation("SubDistrictDeletedByNavigations");

                    b.Navigation("SubDistrictUpdatedByNavigations");

                    b.Navigation("VillageCreatedByNavigations");

                    b.Navigation("VillageDeletedByNavigations");

                    b.Navigation("VillageUpdatedByNavigations");

                    b.Navigation("WithdrawalCreatedByNavigations");

                    b.Navigation("WithdrawalDeletedByNavigations");

                    b.Navigation("WithdrawalUpdatedByNavigations");

                    b.Navigation("WithdrawalVerifiedByNavigations");
                });

            modelBuilder.Entity("MidasDataAccess.Models.Village", b =>
                {
                    b.Navigation("BranchOffices");

                    b.Navigation("CompanyCredits");

                    b.Navigation("IndividualCreditBusinessVillageNavigations");

                    b.Navigation("IndividualCreditVillages");
                });
#pragma warning restore 612, 618
        }
    }
}
